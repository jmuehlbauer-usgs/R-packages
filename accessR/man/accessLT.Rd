% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/accessLT.r
\name{accessLT}
\alias{accessLT}
\title{Produce a light trap datafame from Access database.}
\usage{
accessLT(helper = FALSE, subcol, subval, prepull = FALSE, Samples, Counts,
  setSQL)
}
\arguments{
\item{helper}{Enables the use of a user interface to facilitate data subsetting when conditions are not already known. Default is \code{FALSE}.}

\item{subcol}{If specified, the light trap data conditions by which to subset.}

\item{subval}{If specified, the individual values within the chosen light trap data conditions by which to subset.}

\item{prepull}{Allows the function to run using data that have already been pulled from Access (\code{TRUE}). Default is \code{FALSE}.}

\item{Samples}{If \code{prepull = TRUE}, the samples dataframe to use.}

\item{Counts}{If \code{prepull = TRUE}, the counts dataframe to use.}

\item{setSQL}{If specified, a SQL statement for subsetting the data.}
}
\value{
Creates a list containing dataframes for using and analyzing light trap data from the Access database.
}
\description{
Queries the Access Foodbase database for light trap data, and creates useful dataframes.
}
\details{
The interface enabled with \code{helper = TRUE} allows users to pick subsetting variables from conditions R provides after briefly querying the database. This can be very useful in situations where you do not already know how you might want to subset your data, but can be cumbersome if you already do. The default setting of \code{helper = FALSE} without specifying values for both \code{subcol} and \code{subval} will simply pull all the data from the database.

If a value for \code{subcol} is supplied, \code{subval} must be specified as well. Values supplied to these arguments must be stated with quotes (e.g., \code{subcol = "BarcodeID", subval = c("L00262", "L00263")}. As noted in this example, multiple values can be provided to \code{subval}. These can be included as in the example above using the \code{c()} wrapper, but it is likely more efficient to create a vector of values beforehand that can subsequently be called within this argument.

The argument \code{prepull} is intended to be used with existing light trap spreadsheets pulled from manually the Access database. Under this situation, Access is not queried, but the existing data are combined and formatted in a consistent way (very useful for standardizing old data with newer conventions). If \code{prepull = TRUE}, then \code{Samples} and \code{Counts} must also be specified. These should be dataframes, and are most likely copies of the Access-generated tables \code{tbl_LightTrapSample} and \code{tbl_LightTrapProcess}.

\code{setSQL} provides advanced users with a way to create more complex subsetting conditions, without going through the user interface. If supplied, it should be a SQL statement in the format of the following example (including quotes): 

\code{"SELECT * FROM tbl_LightTrapSample WHERE BarcodeID IN ('L00262', 'L00263')"}

Note that only the arguments specified in the \code{WHERE} and \code{IN} conditions are likely to be useful; subsetting based on the \code{SELECT} or \code{FROM} conditions may produce undesirable outcomes.
}
\section{Warning}{

This function will only work when your Access, and R (including NpptoR and RStudio, if relevant) versions are all 32-bit or both 64-bit. Don't mix! Settings can be modified in NPPtoR and RStudio to make one or the other version the default. To check which version of Access you are using, open an Access database, select "File" (top left), then "Account", then click the "About Access" button.
}
\examples{
## Pull all light trap data.
foo <- accessLT()

## Pull only light traps with barcodes L00262 and L00263
foo2 <- accessLT(subcol = "BarcodeID", subval = c("L00262", "L00263"))

## If you want to subset the data, but you are not sure what conditions to use, then use the helper.
foo3 <- accessLT(helper = TRUE)

## For pre-existing spreadsheets already pulled from Access.
## For this example to work, you need spreadsheets titled \\code{tbl_LightTrapSample.csv} and \\code{tbl_LightTrapProcess.csv} already saved in your working directory. The can be exported directly from Access.
samples <- read.csv('tbl_LightTrapSample.csv')
counts <- read.csv('tbl_LightTrapProcess.csv')
foo4 <- accessLT(prepull = TRUE, Samples = samples, Counts = counts)

## Write a SQL script to include only sample barcodes L00262 and L00263.
foo5 <- accessLT(setSQL = "SELECT * FROM tbl_LightTrapSample WHERE BarcodeID IN ('L00262', 'L00263')")
}
\author{
Jeffrey D. Muehlbauer, \email{jmuehlbauer@usgs.gov}
}
\seealso{
Package \code{RODBC}, specifically functions \code{\link{odbcConnectAccess2007}} and \code{\link{sqlQuery}}, which this function wraps.
}
\concept{
access, database
}

